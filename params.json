{"name":"VmPlaceS","tagline":"VM injector to evaluate placement algorithms by simulation. ","body":"# VM load Injector (JAVA)\r\n* Contact: Adrien.Lebre@inria.fr\r\n* JAVA\r\n* https://github.com/BeyondTheClouds/SimgridInjector\r\n\r\n## Overview\r\nA dedicated framework to evaluate and compare VM placement  algorithms.\r\nAt coarse-grained, the framework is composed of two major components: the injector and the VM placement algorithm.\r\nThe injector is the generic part of the framework (i.e. the one you can directly use) while the VM placement algorithm is the part you want to study (or compare with available algorithms).\r\nCurrently, the SimgridInjector is released with three algorithms:\r\n\r\n* Entropy [VEE09], a centralized approach using a constraint programming approach to solve the placement/reconfiguration VM problem\r\n* Snooze [CCGRID12], a hierarchical approach where each manager of a group invokes Entropy to solve the placement/reconfiguration VM problem. *Note that in the CCGRID'12 paper, Snooze is using a specific heuristic to solve the placement/reconfiguration VM problem. As the sake of simplicity, we have simply reused the entropy scheduling code.*\r\n* DVMS [SCALE12], a distributed approach that dynamically partitions the system and invokes Entropy on each partition.\r\n\r\n## Description of the Injector\r\nThe injector executes different kind of events:\r\n\r\n* Load events:  every t seconds, the injector selects one VM and changes its CPU load according to a\r\nGaussian distribution. t is a random variable that follows an exponential distribution\r\nwith rate parameter lambda declared in the simulator.properties file. The Gaussian distribution is defined by a mean as (i.e mu)\r\nwell as a standard deviation (i.e. sigma) that are given at the beginning of each simulation.\r\nThe parameters of the simulation are defined in the ''simulator.properties'' file available in the ''config'' directory.\r\nBy default, the duration of each experiment is set to 3600 seconds. The parameters are lambda=Nb_VMs/300 and mu=70, sigma=30.\r\nConcretely, the load of each VM starts from 0% and varies on average every 5 minutes in steps of 10 (with a significant part between 40% and 100% of CPU\r\nusage). For more information, please give a look at the injector packages and the corresponding Injector (mainly the generateLoadQueue method),\r\nthe InjectorEvent interface and the LoadEvent class\r\n* Fault events: Similarly to the load events, the injector turn off/on physical hosts following an exponential distribution with a rate parameter lambda\r\ndeclared in the simulator.properties file. This enables to simulate node crashes.\r\n\r\nTo modify the injector parameters, please edit config/simulator.properties\r\n\r\nAt the beginning, the simulation create n VMs, each of which is based on one of predefined VM classes. A VM class is a\r\ntemplate of the specification of a VM and its workload. It is described as\r\nnb_cpu:ramsize:net_bw:mig_speed:mem_speed. VMs are launched on PMs in a round-robin manner, i.e., each PM has almost the same number of VMs.\r\nAccording to the investigated algorithm, VMs are relocated through the different PMs during the whole execution of the simulation.\r\n\r\nThe ultimate objective of the Simgrid Injector VM framework is to deliver a building block that will enable to compare fairly different VM placement algorithms.\r\n\r\n## Installing and Running the simulator\r\n\r\nPlease follow steps described in the [README](https://github.com/BeyondTheClouds/VMPlaceS) of [https://github.com/BeyondTheClouds/VMPlaceS](https://github.com/BeyondTheClouds/VMPlaceS).\r\n\r\n## Topology of the simulated infrastructure\r\n\r\nPlease note that the Simulator injector is currently released with a default platform xml file (see config/cluster_platform.xml) allowing to run a simulation up to 5K hosts in a one-site cluster scenario.\r\nThat means that nodes are homogeneous. They have the same capabilities in terms of nb of cores, cpu/ram capacitity and network bandwidth.\r\nYou can if you want change the network topology as well as the network capability of each node by modifying  the platform file or by using your own one (for more information, please refer to the SimGrid\r\ndocumentation, section Platform description)\r\nWARNING: please keep in mind that due to the fact the capability in terms of cores number/cpu/ramsize is defined in the simulator.properties files, nodes will stay homogeneous.\r\n\r\nThe injector runs on node((nb_node)+1) and the node0 is reserved to run specific services.\r\nFor instance, if you have configured the simulation in order to simulate the centralized approach with 10 nodes. Node 0 will run the event injector, Node[1-10] will host the VMs and the scheduler will  be launched on node 11.\r\nThis is important as the crash injector only consider nodes between 0 (inclusive) and nb_nodes. In other words, the injector node can never crash.\r\n\r\n## Implement/evaluate a new algorithm\r\nTODO - Describe the process to add a new scheduler into the injector\r\n\r\n## Contributors\r\n- Adrien Lebre - adrien.lebre@inria.fr - France - Project founder, principal maintainer\r\n- Jonathan Pastor - jonathan.pastor@inria.fr - France - Implementation of the distributed resolver (based on the DVMS proposal)\r\n- Flavien Quesnel - xxxx - France - Contributor (simulator properties, bug fixes, distributed resolver)\r\n- Jos√© Simao - jsimao@cc.isel.ipl.pt - Portugal - First beta tester - few bug fixes\r\n- Mario Sudhol - mario.sudholt@inria.fr - Implementation of the hierarchical resolver (based on the Snooze proposal)","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}