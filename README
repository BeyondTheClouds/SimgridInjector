* VM load Injector (JAVA)
- Contact: Adrien.Lebre@inria.fr
- JAVA
- https://github.com/BeyondTheClouds/SimgridInjector

** Description
A dedicated framework to evaluate and compare VM placement  algorithms.
At coarse-grained, the framework is composed of two major components: the injecto   r and the VM placement algorithm.
The injector is the generic part of the framework (i.e. the one you can directly use) while the VM placement algorithm is the part you want to study (or compare with available algorithms).

The injector executes different kind of events:
- Load events:  every t seconds, the injector selects one VM and changes its CPU load according to a
Gaussian distribution. t is a random variable that follows an exponential distribution
with rate parameter lambda declared in the simulator.properties file. The Gaussian distribution is defined by a mean as (i.e mu)
well as a standard deviation (i.e. sigma) that are given at the beginning of each simulation.
The parameters of the simulation are defined in the ''simulator.properties'' file available in the ''config'' directory.
By default, the duration of each experiment is set to 3600 seconds. The parameters are lambda=Nb_VMs/300 and mu=70, sigma=30.
Concretely, the load of each VM starts from 0% and varies on average every 5 minutes in steps of 10 (with a significant part between 40% and 100% of CPU
usage). For more information, please give a look at the injector packages and the corresponding Injector (mainly the generateLoadQueue method),
the InjectorEvent interface and the LoadEvent class
- Fault events: Similarly to the load events, the injector turn off/on physical hosts following an exponential distribution with a rate parameter lambda
declared in the simulator.properties file. This enables to simulate node crashes.

To modify the injector parameters, please edit config/simulator.properties

At the beginning, the simulation create n VMs, each of which is based on one of predefined VM classes. A VM class is a
template of the specification of a VM and its workload. It is described as
nb_cpu:ramsize:net_bw:mig_speed:mem_speed. VMs are launched on PMs in a round-robin manner, i.e., each PM has almost the same number of VMs.
According to the investigated algorithm, VMs are relocated through the different PMs during the whole execution of the simulation.

The ultimate objective of the Simgrid Injector VM framework is to deliver a building block that will enable to compare fairly different VM placement algorithms.

** Launcher
Once you have configured the different parameters of your simulation (config/simulator.properties), you can run the simulation by executing the simulation.Main class.
As Simgrid requires several parameters to run, we encourage you to use either Eclipse or Intellij.
Under one of these environments, create a new configuration for launching the simulation.Main class and add the following information:
VM Options:  -Xmx4G -d64 -Dlogback.configurationFile=config/logback.xml
Program arguments: ./config/cluster_platform.xml ./config/generated_deploy.xml  --cfg=cpu/optim:Full --cfg=tracing:1  --cfg=tracing/filename:simu.trace --cfg=tracing/platform:1
Logs (if exists): ./logs/console.log

Topology of the simulated infrastructure:
Please note that the Simulator injector is currently released with a default platform xml file (see config/cluster_platform.xml) allowing to run a simulation up to 5K hosts in a one-site cluster scenario.
That means that nodes are homogeneous. They have the same capabilities in terms of nb of cores, cpu/ram capacitity and network bandwidth.
You can if you want change the network topology as well as the network capability of each node by modifying  the platform file or by using your own one (for more information, please refer to the SimGrid
documentation, section Platform description)
WARNING: please keep in mind that due to the fact the capability in terms of cores number/cpu/ramsize is defined in the simulator.properties files, nodes will stay homogeneous.


** Implement/evaluate a new algorithm
TODO - Describe the process to add a new scheduler into the injector

** Contributors
- Adrien Lebre - adrien.lebre@inria.fr - France -  project founder, principal maintainer
- Flavien Quesnel - xxxx - France - simulator properties, bug fixes, distributed algorithm (based on DVMS proposal)
- Jos√© Simao - jsimao@cc.isel.ipl.pt - Portugal - first beta tester - few bug fixes
