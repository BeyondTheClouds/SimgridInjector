# This file is the main configuration file for the simulator.

#
# Main properties
#

# The duration of the simulation (in sec)
# Default: 1800
simulator.duration = {{ duration }}

# If you want to reach the stationary status faster, just turn the following property to true.
# Please note that this property impact the correctness of the collected traces for the first
# period (i.e., the non stationary status) as most events will last from 0 to the first violation.
simulator.gotostationarystatus = false

# The period for load event occurrence for a VM (in sec)
# MUST always be set.
# Default: 10
simulator.loadperiod = {{ loadperiod }}

# The period for crash occurrence of a node (in sec)
# MUST always be set.
# Default: 300
# 7200000 => 83,3 days
# 2678400 => 1 month
# 16610400 => 6 months => for 100K nodes: a fault every 166 second in average hence
# keeping the formula in mind (1/lambda)*nb_nodes
# For 1K nodes => 166104
# For 100 nodes => 16610
simulator.crashperiod = 111661000

# The algorithm that should be simulated
# default: centralized
# possible value: centralized/hierarchical/distributed
simulator.algorithm = {{ algo }}
# Implementation of the simulated algorithm
simulator.implementation = {{ impl }}

# FFD: sort the VMs by current load instead of CPU and RAM requirement
# default: false
simulator.implementation.ffd.useload = true

# The number of values (-1) the cpu consumption of a VM can take.
# For example, if equal to 5 and the vcpu capacity is 2000, the cpu consumption takes values in {0, 400, 800, 1200, 1600, 2000} 
# Default: 1
loadinjector.nbcpuconsumptionslots = {{ vm_nbcpuconsumptionslots }}

#
# Characteristics of the nodes (simulation only, except for nodes.number).
# It is assumed that the nodes are homogeneous for the simulation.
#

# The number of hosting nodes (i.e. not including the service node that runs the injector).
# Default: 50
hostingnodes.number = {{ nb_hosts }}

# The number of cores on each node.
# Default: 4
hostingnodes.cpunumber = {{ nb_cpus }}

# The cpu capacity of each node = number of cores * capacity of one core.
# Default: 8000
# WARNING: when you change this value, please fix also the corresponding threeshold (cpu.overloadthreshold in dvms.properties)
hostingnodes.cpucapacity = {{ cpu_capacity }}

# The amount of RAM of each node.
# Default: 8192MBytes, 16192
hostingnodes.memorytotal = {{ ram_capacity }}

# The bandwidth of the NIC of each node.
# Default: 125MBytes
hostingnodes.netbw = {{ netbw }}

# The number of service nodes (i.e. the nodes that do not host VM but services related to the scheduling policy)
{% if algo == "hierarchical" && nb_service_nodes == 1 %}
servicenodes.number = 2
{% else %}
servicenodes.number = {{ nb_service_nodes }}
{% endif %}

#
# VMs parameters
#

# Average and standard deviation for the gaussian law that controls how the load evolves for each VM during
# the simulation
load.mean = {{ load_mean }}
load.std  = {{ load_std }}

# The number of VMs.
# SHOULD always be set
# Default: 200
vm.number = {{ nb_vms }}

# The maximum cpu consumption of each VM (= vcpu capacity).
# Default: 2000
vm.cpuconsumption = {{ vm_maxcpuconsumption }}

loadinjector.seed = 23

hosts.turn_off =  true

vms.suspend = false
simulator.vm.suspendperiod = 3600
simulator.vm.suspendduration = 200

# Write the energy consumption there
simulation.energy.log = energy.dat